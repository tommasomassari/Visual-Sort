{"version":3,"sources":["logo.svg","sorters/sorters.js","visualsort/visualsort.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","visualMergeSort","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","WIDTH","window","innerWidth","DEFAULT_BAR_NUM","innerHeight","VisualSort","props","state","barNum","this","reset","multiplier","generateArray","setState","bars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","arr","correct","sort","a","b","myarr","console","log","areArraysEqual","className","map","value","index","key","width","margin","onClick","mergeSort","quickSort","heapSort","bubbleSort","React","Component","randomInt","min","max","random","len","MINVAL","randtemp","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1d237cc5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export function visualMergeSort(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n","import React from 'react';\nimport './visualsort.css';\nimport {visualMergeSort} from '../sorters/sorters.js';\n\nconst BAR_COLOR = \"#79B6F2\";\nconst READ_COLOR = \"#E06B75\";\nconst MINVAL = 5;\nconst MAXVAL = 730;\nconst SPEED = 10; //animation speed in ms\n\nconst WIDTH = window.innerWidth;\nconst HEIGTH = window.innerHeight;\nconst DEFAULT_BAR_NUM = Math.floor(WIDTH/1536*350); //350;\n\nexport default class VisualSort extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      barNum: DEFAULT_BAR_NUM,\n    };\n  }\n\n  componentDidMount(){\n    this.reset();\n  }\n\n  reset(multiplier = 1){\n    let barNum = DEFAULT_BAR_NUM * multiplier;\n    const array = generateArray(barNum)\n    this.setState({array,barNum});\n  }\n\n  mergeSort(){\n    const animations = visualMergeSort(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const bars = document.getElementsByClassName('bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = bars[barOneIdx].style;\n        const barTwoStyle = bars[barTwoIdx].style;\n        const color = i % 3 === 0 ? BAR_COLOR : READ_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * SPEED);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = bars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * SPEED);\n      }\n    }\n  }\n\n  quickSort(){}\n\n  heapSort() {}\n\n  bubbleSort(){}\n\n  test() { //NOT TO USE WITH VISUAL SORTING, NEED ACTUAL ARRAY\n    let arr = generateArray(1000);\n    const correct = arr.slice().sort((a, b) => a - b);\n    const myarr = visualMergeSort(arr.slice());\n    console.log(areArraysEqual(correct, myarr));\n  }\n\n  render(){\n    const {array} = this.state;\n    const {barNum} = this.state;\n\n    return (\n      <>\n      <div className=\"bar-container\">\n      {array.map((value, index) => (\n        <div\n        className=\"bar\"\n        key={index}\n        style = {{\n          height: `${value}px`,\n          width: `${2/ (barNum/DEFAULT_BAR_NUM)}px`,\n          margin: `${1/ (barNum/DEFAULT_BAR_NUM)}px`,\n          backgroundColor : BAR_COLOR,\n        }}></div>\n      ))}\n      </div>\n      <div className=\"buttons-bar\">\n      <button onClick={() => this.reset(1)}>Reset</button>\n      <button onClick={() => this.reset(2)}>Double</button>\n      <button onClick={() => this.reset(4)}>x4</button>\n      <button onClick={() => this.reset(8)}>x8</button>\n      <button onClick={() => this.reset(0.5)}>Half</button>\n      <button onClick={() => this.reset(0.25)}>1/4</button>\n      <button onClick={() => this.reset(0.125)}>1/8</button>\n      <>  {WIDTH} {DEFAULT_BAR_NUM} </>\n      <button onClick={() => this.mergeSort()}>Merge Sort</button>\n      <button onClick={() => this.quickSort()}>Quick Sort</button>\n      <button onClick={() => this.heapSort()}>Heap Sort</button>\n      <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n      </div>\n      </>\n    )\n  }\n}\n\nfunction randomInt(min, max) {\n  // min is included, max is not included\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nfunction generateArray(len = DEFAULT_BAR_NUM) {\n    let array = [MAXVAL,MINVAL]; // min and max are always present\n\n    for (let i=0; i<len-2; i++){\n      array.push(randomInt(MINVAL+1, MAXVAL));\n    }\n    let randtemp = randomInt(2,len);\n    [array[0] , array[randtemp]] = [array[randtemp], array[0]];\n    randtemp = randomInt(1,len);\n    [array[1] , array[randtemp]] = [array[randtemp], array[1]];\n    return array;\n  }\n\n  function areArraysEqual(a, b) {\n    if (a.length !== b.length) return false;\n\n    for (let i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n","import React from 'react';\nimport logo from './logo.svg';\nimport VisualSort from './visualsort/visualsort';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <VisualSort></VisualSort>\n      <h1>Coming Soon..</h1>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}