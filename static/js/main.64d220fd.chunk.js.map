{"version":3,"sources":["logo.svg","visualsort/visualsort.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","VisualSort","props","state","array","this","generateArray","min","max","i","push","Math","floor","random","setState","className","map","value","index","key","style","height","backgroundColor","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gKAAAA,EAAOC,QAAU,IAA0B,kC,6JCOtBC,G,kBACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXC,MAAO,IAJQ,E,iFAUjBC,KAAKC,kB,sCAKL,IADA,IA2BeC,EAAKC,EA3BdJ,EAAQ,GACLK,EAAE,EAAGA,EApBM,IAoBaA,IAC/BL,EAAMM,MAyBOH,EAzBQ,EAyBHC,EAzBM,IA0BrBG,KAAKC,MAAMD,KAAKE,UAAYL,EAAMD,GAAOA,KAxB9CF,KAAKS,SAAS,CAACV,Y,+BAGR,IACAA,EAASC,KAAKF,MAAdC,MAEP,OACE,yBAAKW,UAAU,iBACdX,EAAMY,KAAI,SAACC,EAAOC,GAAR,OACT,yBACAH,UAAU,MACVI,IAAKD,EACLE,MAAS,CACPC,OAAO,GAAD,OAAKJ,EAAL,MACNK,gBApCQ,qB,GAGsBC,IAAMC,Y,MCO/BC,MATf,WACE,OACE,yBAAKV,UAAU,OACb,kBAAC,EAAD,MACA,+CCGcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.64d220fd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './visualsort.css';\n\nconst DEFAULT_BAR_NUM = 350;\nconst BAR_COLOR = \"#79B6F2\";\nconst READ_COLOR = \"#E06B75\"\n\nexport default class VisualSort extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      // bars = DEFAULT_BAR_NUM,\n    };\n  }\n\n  componentDidMount(){\n    this.generateArray();\n  }\n\n  generateArray() {\n    const array = [];\n    for (let i=0; i<DEFAULT_BAR_NUM; i++){\n      array.push(randomInt(5, 730));\n    }\n    this.setState({array});\n  }\n\n  render(){\n    const {array} = this.state;\n\n    return (\n      <div className=\"bar-container\">\n      {array.map((value, index) => (\n        <div\n        className=\"bar\"\n        key={index}\n        style = {{\n          height: `${value}px`,\n          backgroundColor : BAR_COLOR,\n        }}></div>\n      ))}\n      </div>\n    )\n\n  }\n}\n\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport VisualSort from './visualsort/visualsort';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <VisualSort></VisualSort>\n      <h1>Coming Soon..</h1>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}