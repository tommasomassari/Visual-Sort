{"version":3,"sources":["logo.svg","sorters/sorters.js","visualsort/visualsort.jsx","sorters/visualBubbleSort.js","sorters/visualCountingSort.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","visualMergeSort","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","SPEED","WIDTH","window","innerWidth","HEIGTH","innerHeight","DEFAULT_BAR_NUM","MAXVAL","VisualSort","props","state","barNum","speed","generateArray","this","setState","multiplier","bars","document","getElementsByClassName","bar","style","backgroundColor","render","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","setTimeout","newHeight","height","len","reads","writes","visualBubbleSort","prev","readsText","writesText","innerText","type","a","b","ha","hb","prev_a","prev_b","style1","style2","doneAnimation","min","max","count","Array","fill","visualCountingSort","h","t","arr","correct","sort","myarr","console","log","areArraysEqual","className","map","value","index","key","width","margin","onClick","reset","mergeSort","quickSort","heapSort","bubbleSort","countingSort","React","Component","randomInt","random","MINVAL","randtemp","App","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.40873185.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export function visualMergeSort(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './visualsort.css';\nimport {visualMergeSort} from '../sorters/sorters.js';\nimport {visualBubbleSort} from '../sorters/visualBubbleSort.js';\nimport {visualCountingSort} from '../sorters/visualCountingSort.js';\n\nconst BAR_COLOR = \"#79B6F2\";\nconst READ_COLOR = \"#98C379\";\nconst WRITE_COLOR = \"#E06B75\";\nconst DONE_COLOR = \"#C578DD\";\nconst INPOSITION_COLOR = \"#C578DD\";\n\nconst SPEED = [1000,100,10,1,0.1]; //animation speed in ms\n\nconst WIDTH = window.innerWidth;\nconst HEIGTH = window.innerHeight;\n\nconst DEFAULT_BAR_NUM = Math.floor(WIDTH/1536*350); //350 number of bars in full screen;\nconst MINVAL = 5;\nconst MAXVAL = Math.floor(HEIGTH/872*750); //750 pixel in height when fullscreen\n\nexport default class VisualSort extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      barNum: DEFAULT_BAR_NUM,\n      speed: 4,\n    };\n  }\n\n  componentDidMount(){\n    const array = generateArray(this.state.barNum);\n    this.setState({array});\n  }\n\n  reset(multiplier = 1){\n    let bars = document.getElementsByClassName('bar');\n    for (let bar of bars){\n      bar.style.backgroundColor = BAR_COLOR;\n    }\n    let barNum = DEFAULT_BAR_NUM * multiplier;\n    const array = generateArray(barNum);\n    this.setState({array,barNum});\n    this.render();\n  }\n\n  mergeSort(){\n    const animations = visualMergeSort(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      // console.log(animations[i]);\n      const bars = document.getElementsByClassName('bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = bars[barOneIdx].style;\n        const barTwoStyle = bars[barTwoIdx].style;\n        const color = i % 3 === 0 ? BAR_COLOR : READ_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * SPEED);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = bars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * SPEED);\n      }\n    }\n  }\n\n  quickSort(){}\n\n  heapSort() {}\n\n  bubbleSort(){\n    const animations = visualBubbleSort(this.state.array);\n    let bars = document.getElementsByClassName('bar');\n    let prev = animations[0].slice(1,3);\n    let readsText = document.getElementsByClassName('complexity-text-reads');\n    let writesText = document.getElementsByClassName('complexity-text-writes');\n    let complexity = document.getElementsByClassName('complexity-text-complexity');\n\n    complexity[0].innerText = \"O(N^2)\";\n\n    for (let i = 0; i < animations.length; i++) {\n      let [type,a,b,ha,hb,reads,writes] = animations[i];\n      let [prev_a, prev_b] = prev;\n      const style1 = bars[a].style;\n      const style2 = bars[b].style;\n      let color;\n\n      if (type == 0){ // 0=read\n        color = READ_COLOR;\n      }\n      else if (type == 1){ // 1=write\n        color = WRITE_COLOR;\n      }\n      setTimeout(() => {\n        bars[prev_a].style.backgroundColor = BAR_COLOR;\n        bars[prev_b].style.backgroundColor = BAR_COLOR;\n        style1.backgroundColor = color;\n        style2.backgroundColor = color;\n        style1.height = `${ha}px`;\n        style2.height = `${hb}px`;\n        readsText[0].innerText = reads;\n        writesText[0].innerText = writes;\n      }, i* SPEED[this.state.speed]);\n\n      prev = [a,b];\n    }\n\n    setTimeout(() => {\n      bars[prev[0]].style.backgroundColor = BAR_COLOR;\n      bars[prev[1]].style.backgroundColor = BAR_COLOR;\n      this.doneAnimation(0);\n    }, animations.length * SPEED[this.state.speed])\n  }\n\n  countingSort(){\n    let animations = visualCountingSort(this.state.array,MINVAL,MAXVAL);\n\n    let bars = document.getElementsByClassName('bar');\n    let prev = animations[0][1];\n    let readsText = document.getElementsByClassName('complexity-text-reads');\n    let writesText = document.getElementsByClassName('complexity-text-writes');\n    let complexity = document.getElementsByClassName('complexity-text-complexity');\n\n    complexity[0].innerText = \"O(N)\";\n\n    for (let i = 0; i < animations.length; i++) {\n      let [type,a,h,reads,writes] = animations[i];\n      let color;\n\n      if (type == 0){ // 0=read\n        color = READ_COLOR;\n      }\n      else if (type == 1){ // 1=write\n        color = WRITE_COLOR;\n      }\n      setTimeout(() => {\n        bars[prev].style.backgroundColor = BAR_COLOR;\n        bars[a].style.backgroundColor = color;\n        prev = a;\n        bars[a].style.height = `${h}px`;\n        readsText[0].innerText = reads;\n        writesText[0].innerText = writes;\n      }, i* SPEED[this.state.speed]);\n\n    }\n\n    setTimeout(() => {\n      bars[prev].style.backgroundColor = BAR_COLOR;\n      this.doneAnimation(0);\n    }, animations.length * SPEED[this.state.speed])\n\n\n  }\n\n  doneAnimation(t){\n    let bars = document.getElementsByClassName('bar');\n    for (let i = 0; i < this.state.array.length; i++){\n      setTimeout(() => {\n        bars[i].style.backgroundColor = DONE_COLOR;\n      }, t+ i * SPEED[this.state.speed]);\n    }\n  }\n\n  test() { //NOT TO USE WITH VISUAL SORTING, NEED ACTUAL ARRAY\n    let arr = generateArray(1000);\n    const correct = arr.slice().sort((a, b) => a - b);\n    const myarr = visualMergeSort(arr.slice());\n    console.log(areArraysEqual(correct, myarr));\n  }\n\n  render(){\n    const {array} = this.state;\n    const {barNum} = this.state;\n\n    return (\n      <>\n      <div className=\"bar-container\">\n      {array.map((value, index) => (\n        <div\n        className=\"bar\"\n        key={index}\n        style = {{\n          height: `${value}px`,\n          width: `${2/ (barNum/DEFAULT_BAR_NUM)}px`,\n          margin: `${1/ (barNum/DEFAULT_BAR_NUM)}px`,\n          backgroundColor : BAR_COLOR,\n        }}></div>\n      ))}\n      </div>\n      <div className=\"buttons-bar\">\n        <div className=\"buttons-bar-text\">\n          Set array size: <br></br>\n          Choose sorting algorithm: <br></br>\n          Set speed level: <br></br>\n        </div>\n\n        <div className=\"buttons-bar-button\">\n          <button onClick={() => this.reset(1)}>Reset</button>\n          <button onClick={() => this.reset(2)}>Double</button>\n          <button onClick={() => this.reset(4)}>x4</button>\n          <button onClick={() => this.reset(8)}>x8</button>\n          <button onClick={() => this.reset(0.5)}>Half</button>\n          <button onClick={() => this.reset(0.25)}>1/4</button>\n          <button onClick={() => this.reset(0.125)}>1/8</button>\n          <button onClick={() => this.reset(0.0625)}>1/16</button>\n          <br></br>\n          <button onClick={() => this.mergeSort()}>Merge Sort</button>\n          <button onClick={() => this.quickSort()}>Quick Sort</button>\n          <button onClick={() => this.heapSort()}>Heap Sort</button>\n          <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n          <button onClick={() => this.countingSort()}>Counting Sort</button>\n          <br></br>\n          <button onClick={() => this.state.speed = 0}>slow-mo</button>\n          <button onClick={() => this.state.speed = 1}>slow</button>\n          <button onClick={() => this.state.speed = 2}>medium</button>\n          <button onClick={() => this.state.speed = 3}>fast</button>\n          <button onClick={() => this.state.speed = 4}>turbo</button>\n        </div>\n\n      </div>\n      <div className=\"complexity-bar\">\n        <div className=\"complexity-text\">\n          Complexity: <br></br>\n          Number of access: <br></br>\n          Number of writes:\n        </div>\n\n        <div className=\"complexity-text-complexity\">O(n)</div>\n        <div className=\"complexity-text-reads\">0</div>\n        <div className=\"complexity-text-writes\">0</div>\n      </div>\n      </>\n    )\n  }\n}\n\nfunction randomInt(min, max) {\n  // min is included, max is not included\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nfunction generateArray(len = DEFAULT_BAR_NUM) {\n    let array = [MAXVAL,MINVAL]; // min and max are always present\n\n    for (let i=0; i<len-2; i++){\n      array.push(randomInt(MINVAL+1, MAXVAL));\n    }\n    let randtemp = randomInt(2,len);\n    [array[0] , array[randtemp]] = [array[randtemp], array[0]];\n    randtemp = randomInt(1,len);\n    [array[1] , array[randtemp]] = [array[randtemp], array[1]];\n    return array;\n  }\n\nfunction areArraysEqual(a, b) {\n    if (a.length !== b.length) return false;\n\n    for (let i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n","export function visualBubbleSort(array){\n  let animations = []; //[type, i, j] 0=read, 1=write\n  let len = array.length;\n  let reads = 0;\n  let writes = 0;\n\n  for (let i=0; i<len; i++){\n    for (let j=0; j<len-i-1; j++){\n      animations.push([0,j,j+1,array[j],array[j+1],reads,writes]);\n      reads += 1\n      if (array[j] > array[j+1]){\n        animations.push([1,j,j+1,array[j],array[j+1],reads,writes]);\n        [array[j], array[j+1]] = [array[j+1],array[j]];\n        writes += 1\n        animations.push([1,j,j+1,array[j],array[j+1],reads,writes]);\n        animations.push([0,j,j+1,array[j],array[j+1],reads,writes]);\n      }\n    }\n  }\n  // console.log(array);\n  return animations\n}\n","export function visualCountingSort(array,min,max){\n  let count = new Array(max+1).fill(0);\n  let animations = [];\n  let reads = 0;\n  let writes = 0;\n\n  for (let i=0; i<array.length; i++){\n    let pos = array[i];\n    count[pos] += 1;\n    reads++;\n    animations.push([0,i,array[i],reads,writes]);\n  }\n\n  let j = 0;\n  for (let i=min; i<=max+1; i++){\n    while (count[i]>0){\n      array[j] = i;\n      writes++;\n      animations.push([1,j,i,reads,writes]);\n      j++;\n      count[i]--;\n    }\n  }\n  return animations\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport VisualSort from './visualsort/visualsort';\nimport './App.css';\nimport ReactDOM from 'react-dom'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <VisualSort></VisualSort>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}